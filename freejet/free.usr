c-----------------------------------------------------------------------
      subroutine usrdat2
      use mldat
      include 'SIZE'
      include 'TOTAL'
      
      write(*,*) "nid = ",nid

c   Reynolds number
      nre1 = 100.0   
c   power law index
      n1 = 2.0

c ### GEOMETRY
c   half-width or radius of branches
      rr1 = 0.5
c   branching angle: radians
      th = 0.0 
c   inlet boundary:  perpendicular to branch: thi = th 
c                    parallel to y: thi = 0
      thi = th
c   y-coordinate on each branch INLET closest to y=0
      yy1 = -1.0*rr1      

c ### INLET PROFILE        
c   volumetric flow rates at branch inlets
      q1 = 1.0
c   maximum velocities at branch inlets
      um1 = ( q1 / (2.0*rr1) ) * ( (2.0*n1 + 1.0) / (n1 + 1.0) )
c   allocate BC arrays for one-time calculation
      allocate( uxbc  (lx1, ly1, lz1, lelt) )
      allocate( uybc  (lx1, ly1, lz1, lelt) )      

c ### FLUID MODEL
c   constant density
      param(1) = 1.0   
c   consistency index (K) or Newtonian viscosity (mu)
c   (based on generalized Reynolds num, Muzychka & Edge 2008)
      udiff1 = param(1)*( (q1 / (2*rr1)) ** (2.0 - n1) )
      udiff1 = udiff1 * ( (2*2*rr1) ** n1 ) * ( 8.0 ** (1.0 - n1) )
      udiff1 = udiff1 / ( nre1 * ( 1.0 + 1.0/(2.0*n1) ) ** n1 ) 
c    viscosity array
      allocate( shvis  (lx1, ly1, lz1, lelt) )
      
c ### OUTLET SPONGE
!    start (spmin), end (spmax), and maximum consistency (udiffsp)
      spmax = glmax(xm1, lx1*ly1*lz1*lelt)
      splen = 5.0 
      spmin = spmax - splen
      udiffsp = udiff1 * 1.0E4

c ### STOPPING DETAILS
!    test every
      teststep = param(15)
!    error threshold
      ststerr = um1 * 1.0E-5
!    arrays
      allocate( tmpst  (lx1, ly1, lz1, lelt) )

c ### MESH DETAILS

c ### OUTPUT
      open(unit=50,file="usrdat2_params.out")
      write(50,*) "lx1 = ",lx1,", ly1 = ",ly1,", lz1 = ",lz1
      write(50,*) "lp = ",lp,", lelt = ",lelt
      write(50,*) "nre = ",nre1,", n1 = ",n1,", udiff1 =",udiff1
      write(50,*) "rr1 = ",rr1,", th = ",th,", thi =",thi
      write(50,*) "q1 = ",q1,", um1 = ",um1
      write(50,*) "spmax = ",spmax,", splen = ",splen,", spmin =",spmin
      write(50,*) "udiffsp = ",udiffsp
      close(50)

c ### SOLVER FLAGS   
      param(30) = 1.    ! enable uservp()
      param(66) = 0.    ! output format (<0 = ASCII)
      param(67) = 0.    ! restart format 
!      param(59) = 1.    ! mesh modification

      return 
      end

c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      use mldat
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      
      integer :: ieg
      
      if (ifield.eq.1) then
        if(istep.eq.0) then
          udiff = udiff1
        else
          udiff = shvis(ix,iy,iz,gllel(ieg))
        endif
        utrans = param(1)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      use mldat
      include 'SIZE'
      include 'TOTAL'
      
      real,allocatable,dimension(:,:,:,:) :: gamma, ststa, tmpsh, newst 
      logical,allocatable,dimension(:,:,:,:) :: ststest
      real :: gc, hh, upro, t, spn
      integer :: e, q

!     strain rate invariants (nek built-in)
      common /screv/ ei2(lx1,ly1,lz1,lelt)
     $             , ei3(lx1,ly1,lz1,lelt)

!     might not be necessary with further debugging
!      if (allocated(shvis)) deallocate(shvis)

      allocate( gamma  (lx1, ly1, lz1, lelt) )   
      q = 1   
      ntot1  = nx1*ny1*nz1*nelv
      
      if (istep.eq.0) then
        do i=1,ntot1
          x = xm1(i,1,1,1)
          y = ym1(i,1,1,1)
          z = zm1(i,1,1,1)

!         distance from the center of inlet boundary      
          hh = (y-yy1)/cos(thi)
          hh = abs(abs(hh)-rr1)/rr1
          
          if (hh.ge.0 .and. hh.le.1) then
            upro = (1.0-hh**(1.0+1.0/n1))  
          else
            upro = 0.0
          endif    
          
          uxbc(i,1,1,1) = upro*um1*cos(th)
          uybc(i,1,1,1) = upro*um1*sin(th)

        enddo
      endif

!     calculate strain rate components (nek built-in)
      call stnrinv

      do ieg= 1, nelgt
      if (gllnid(ieg).eq.nid) then
!      "if this element is the responsibility of this core"
!      necessary (?) for parallel computation
        iel = gllel(ieg)
          
          do K = 1, nz1
           do J = 1, ny1
            do I = 1, nx1

!             need shear rate for power-law model
              gamma(i,j,k,iel)=(0.5*abs(ei2(i,j,k,iel)))**0.5
!              write(*,*) "gamma = ",gamma(i,j,k,iel)
!             keep track of lowest non-zero shear rate
              gc = gamma(i,j,k,iel)
              
              if (gc.lt.gm .and. gc .gt. 0.0) then
                gm = gc
              end if
              
            end do
           end do
          end do
          
          do K = 1, nz1
           do J = 1, ny1
            do I = 1, nx1
              
!             if shear rate is 0:
!                n .lt. 1: div by 0 in power-law model
!                n .ge. 1: 0 assigned to udiff (nek rejects)
              if (gamma(i,j,k,iel) .lt. gm) then             
                gamma(i,j,k,iel) = gm
              end if
              
!             power law viscosity
 
              shvis(i,j,k,iel) = (gamma(i,j,k,iel)) ** (n1 - 1.0)
              shvis(i,j,k,iel) = udiff1*shvis(i,j,k,iel)
              
              if (xm1(i,j,k,iel).gt.spmin) then
               !tmp99 = (udiffsp - udiff1)*(xm1(i,j,k,iel) - spmin)/splen
               spn = n1 + (0.5 - n1)*((xm1(i,j,k,iel) - spmin)/splen)**2
               shvis(i,j,k,iel) = (gamma(i,j,k,iel)) ** (spn - 1.0)
              endif
            end do
           end do
          end do
           
      end if
      end do
      
!     must reset the shear rate tracker
      gm = 1e38
      
      if (istep.eq.0) then
         tmpst = (vx**2 + vy**2)**0.5
         call outpost(vx,vy,vz,pr,t,'ini')
      else
!        stopping test
         if (mod(istep,teststep).eq.0) then
            newst = (vx**2 + vy**2)**0.5
            ststa = newst - tmpst
            ststest = ststa .ge. ststerr
!           send halting signal if completely below threshold 
            if (.not. any(ststest)) then
               if (nid.eq.1) then
               open(unit=41,file="ioinfo",status="replace")
               write(41,*) "-2"
               close(41)
               endif
            endif

            tmpst = newst
         endif

         if (mod(istep,iostep).eq.0) then 
            tmpsh = shvis
!            write(*,*) "Here's ",nid," with a 'shr' outpost"
            call outpost(gamma,tmpsh,vz,ststa,ststest,'shr')
         endif

      endif

      deallocate(gamma)

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)
      use mldat
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
            
      integer e, eg
      
      e = gllel(eg)
      
      if (ifield.eq.1) then
      
        ux = uxbc(ix,iy,iz,e)
        uy = uybc(ix,iy,iz,e)
        uz = 0.0

      elseif (ifield.eq.2) then

        temp = 0.0

      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      use mldat
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      
      e = gllel(eg)
            
      if (ifield.eq.1) then

        ux = 0.0
        uy = 0.0
        uz = 0.0

        if (n1.ge.1.0 .and. abs(y).lt.rr1) then
           ux = um1*(1.0-(abs(y)/rr1)**(1.0+1.0/n1))  
        endif

      elseif (ifield.eq.2) then

        temp = 0.0

      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
c
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      use mldat
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
